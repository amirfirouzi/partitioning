function [z sol]=MyCost(x,model)

    nTasks=model.nTasks;
    nMachines=model.nMachines;
    R1=model.r1;
    R2=model.r2;
    M1=model.m1;
    M2=model.m2;
    Adjacency=model.adj;
    
    partition.Tasks=[];
    partitions=repmat(partition,nMachines,1);
    
    % Internal Communication Volume for each machine
    internal=zeros(1, nMachines);
    % internal Load for Resource type 1 in each machine
    loadR1=zeros(1, nMachines);
    % internal Load for Resource type 2 in each machine
    loadR2=zeros(1, nMachines);
    
    x=[1 2 1 2 1];
    
    % get tasks placed in each partition
    for p=1:nMachines
        % fill partitions with tasks that are assigned to
        partitions(p).Tasks=find(x==p);
        
        internal(p)=InternalCommunication(partitions(p).Tasks,Adjacency,x);
        loadR1(p)=InternalLoad(partitions(p).Tasks,R1,x);
        loadR2(p)=InternalLoad(partitions(p).Tasks,R2,x);
    end
    
    % Value of Selected Items
    V1=sum(v.*x);
    % Weight of Selected Items
    W1=sum(w.*x);
    % Value of unSelected Items
    V0=sum(v.*(1-x));
    % Weight of unSelected Items
    W0=sum(w.*(1-x));
    
    % Violation percent
    Violation=max(W1/W-1,0);
    
    % old goal function
%     beta=10;
%     z=V0*(1+beta*Violation);
%     
    alpha=10000;
    z=V0+alpha*Violation;
    
    sol.V1=V1;
    sol.W1=W1;
    sol.V0=V0;
    sol.W0=W0;
    sol.Violation=Violation;
    sol.z=z;
    sol.IsFeasible=(Violation==0);

end

function sum=InternalCommunication(Tasks, Adj, x)
    sum=0;
    for i=1:numel(Tasks)
        for j=i+1:numel(Tasks)
            if(i<j)
                from=Tasks(i);
                to=Tasks(j);
                sum=sum+Adj(from,to)
            end
        end
    end
end

function load=InternalLoad(Tasks, R,x)
    load=0;
    for i=1:numel(Tasks)
         task=Tasks(i);
         load=load+R(task);
    end
end

function sum=ExternalCommunication(partitions, Adj, x)
    sum=0;
    for i=1:numel(Tasks)
        for j=i+1:numel(Tasks)
            if(i<j)
                from=Tasks(i);
                to=Tasks(j);
                sum=sum+Adj(from,to)
            end
        end
    end
end